# Automatically create the required <packagename>Config.cmake and <packagename>ConfigVersion.cmake

function(cmcs_create_config_files)
    cmcs_create_function_variable_prefix(_VAR_PREFIX)
    cmake_parse_arguments(PARSE_ARGV 0 "${_VAR_PREFIX}" "" 
                          "INPUT_FILE;INSTALL_DESTINATION" "COMPATIBILITY")
    cmcs_error_if_project_locked()
    cmcs_error_if_project_not_init()
    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_CONFIG_INSTALL_DESTINATION)
    cmcs_variable_exists_or_default(VARIABLE ${_VAR_PREFIX}_INSTALL_DESTINATION DEFAULT "${${PROJECT_NAME}_CONFIG_INSTALL_DESTINATION}")

    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_PACKAGE_NAME)
    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_EXPORT_NAME)
    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_REQUIRED_PACKAGES)
    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_OPTIONAL_PACKAGES)
    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_OPTIONAL_CONDITIONAL_PACKAGES)

    # Write Config
    if(${_VAR_PREFIX}_INPUT_FILE)
        # configure_package_config_file(
        #     "${PROJECT_SHORT_NAME}.in.cmake"
        #     "share/${PROJECT_SHORT_NAME}/${PROJECT_SHORT_NAME}Config.cmake"
        #     INSTALL_DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_SHORT_NAME}"
        #     PATH_VARS "CMAKECS_CMAKE_DIR;INSTALL_DEST")
    else(${_VAR_PREFIX}_INPUT_FILE)
    
        set(_config_contents)
        string(APPEND _config_contents "#This file was automatically generated by CMakeCS!")
        string(APPEND _config_contents "@PACKAGE_INIT@\n")
        string(APPEND _config_contents "cmake_policy (PUSH)\n")
        string(APPEND _config_contents "cmake_minimum_required (VERSION 3.17)\n")
        string(APPEND _config_contents "include(CMakeFindDependencyMacro)\n")

        string(APPEND _config_contents "set(${${PROJECT_NAME}_PACKAGE_NAME}_BUILD_SHARED @BUILD_SHARED_LIBS@)\n")

        # Write find_dependency calls fo required packages
        foreach(_extpackage IN LISTS ${PROJECT_NAME}_REQUIRED_PACKAGES)
            cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE)
            string(REPLACE ";REQUIRED" "" ${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE ${${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE})
            string(APPEND _config_contents "find_dependency(")   
            string(APPEND _config_contents "${${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE}") 
            string(APPEND _config_contents ")\n") 
        endforeach()

        # Write find_dependency calls fo optional packages
        foreach(_extpackage IN LISTS ${PROJECT_NAME}_OPTIONAL_PACKAGES)
            cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE)
            list(REMOVE_ITEM ${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE REQUIRED) # handled by find_dependecy
            string(APPEND _config_contents "set (${${PROJECT_NAME}_PACKAGE_NAME}_ENABLE_${_extpackage} @${${PROJECT_NAME}_PACKAGE_NAME}_ENABLE_${_extpackage}@)\n")
            string(APPEND _config_contents "if (${${PROJECT_NAME}_PACKAGE_NAME}_ENABLE_${_extpackage})\n" )
            string(APPEND _config_contents "    find_dependency (")   
            string(APPEND _config_contents "${${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE}") 
            string(APPEND _config_contents ")\n")
            string(APPEND _config_contents "endif ()\n") 
        endforeach()

        # Write find_dependency calls for dependent optional packages
        foreach(_extpackage IN LISTS ${PROJECT_NAME}_OPTIONAL_DEPENDENT_PACKAGES)
            cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE)
            list(REMOVE_ITEM ${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE REQUIRED) # handled by find_dependecy
            string(APPEND _config_contents "set (${${PROJECT_NAME}_PACKAGE_NAME}_ENABLE_${_extpackage} @${${PROJECT_NAME}_PACKAGE_NAME}_ENABLE_${_extpackage}@)\n")
            string(APPEND _config_contents "if (${${PROJECT_NAME}_PACKAGE_NAME}_ENABLE_${_extpackage})\n" )
            string(APPEND _config_contents "    find_dependency (")   
            string(APPEND _config_contents "${${PROJECT_NAME}_${_extpackage}_FIND_PACKAGE}") 
            string(APPEND _config_contents ")\n")
            string(APPEND _config_contents "endif ()\n") 
        endforeach()

        string(APPEND _config_contents "cmake_policy (POP)\n")

        file(WRITE "${${PROJECT_NAME}_PACKAGE_NAME}-Config.in.cmake" "${_config_contents}")
        set(${_VAR_PREFIX}_INPUT_FILE "${${PROJECT_NAME}_PACKAGE_NAME}Config.in.cmake")
    endif(${_VAR_PREFIX}_INPUT_FILE)

    configure_package_config_file(
            "${${_VAR_PREFIX}_INPUT_FILE}"
            "${${_VAR_PREFIX}_INSTALL_DESTINATION}/${PROJECT_SHORT_NAME}Config.cmake"
            INSTALL_DESTINATION "${${_VAR_PREFIX}_INSTALL_DESTINATION}"
            PATH_VARS "")
    # Write ConfigVersion
    #cmcs_variable_exists_or_error(PREFIX "${_VAR_PREFIX}" VARIABLE_NAMES "")
    cmcs_variable_exists_or_default(PREFIX "${_VAR_PREFIX}" VARIABLE "COMPATIBILITY" DEFAULT "AnyNewerVersion")

    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_VERSION)
    cmcs_get_global_property(PROPERTY ${PROJECT_NAME}_VERSION_COMPATIBILITY)
    write_basic_package_version_file("${${_VAR_PREFIX}_INSTALL_DESTINATION}/${${PROJECT_NAME}_PACKAGE_NAME}ConfigVersion.cmake"
                                     VERSION ${${PROJECT_NAME}_VERSION} 
                                     COMPATIBILITY ${${PROJECT_NAME}_VERSION_COMPATIBILITY})
                                     
                                
    # install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_INSTALL_PACKAGE}/${PROJECT_SHORT_NAME}Config.cmake
    #         ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_INSTALL_PACKAGE}/${PROJECT_SHORT_NAME}ConfigVersion.cmake
    #         DESTINATION ${PROJECT_INSTALL_PACKAGE} )
    # install(DIRECTORY "cmake" DESTINATION "${PROJECT_INSTALL_PACKAGE}")
endfunction()